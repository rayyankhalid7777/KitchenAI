{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing necessary libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "from sklearn.metrics import ConfusionMatrixDisplay\n",
    "\n",
    "# Function to load the Adult Income dataset\n",
    "def load_adult_dataset():\n",
    "    url = \"https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data\"\n",
    "    columns = [\n",
    "        \"age\", \"workclass\", \"fnlwgt\", \"education\", \"education-num\", \"marital-status\",\n",
    "        \"occupation\", \"relationship\", \"race\", \"sex\", \"capital-gain\", \"capital-loss\",\n",
    "        \"hours-per-week\", \"native-country\", \"income\"\n",
    "    ]\n",
    "    data = pd.read_csv(url, names=columns, header=None, na_values=\" ?\")\n",
    "    data.dropna(inplace=True)\n",
    "    data['income'] = data['income'].apply(lambda x: 1 if x == \" >50K\" else 0)\n",
    "    X = pd.get_dummies(data.iloc[:, :-1], drop_first=True)\n",
    "    y = data['income'].values\n",
    "    return X, y\n",
    "\n",
    "# Function to load the Bank Marketing dataset\n",
    "import zipfile\n",
    "import requests\n",
    "from io import BytesIO\n",
    "import pandas as pd\n",
    "\n",
    "def load_bank_dataset():\n",
    "    url = \"https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank.zip\"\n",
    "    response = requests.get(url)\n",
    "    \n",
    "    # Open the ZIP file and extract the specific file\n",
    "    with zipfile.ZipFile(BytesIO(response.content)) as z:\n",
    "        with z.open('bank.csv') as f:\n",
    "            data = pd.read_csv(f, sep=\";\")\n",
    "    \n",
    "    data['y'] = data['y'].apply(lambda x: 1 if x == \"yes\" else 0)\n",
    "    X = pd.get_dummies(data.iloc[:, :-1], drop_first=True)\n",
    "    y = data['y'].values\n",
    "    return X, y\n",
    "\n",
    "\n",
    "\n",
    "# Function to evaluate classifiers\n",
    "def evaluate_classifier(classifier, param_grid, X_train, y_train, X_test, y_test):\n",
    "    grid_search = GridSearchCV(classifier, param_grid, cv=3, scoring='accuracy')\n",
    "    grid_search.fit(X_train, y_train)\n",
    "    best_model = grid_search.best_estimator_\n",
    "    train_accuracy = accuracy_score(y_train, best_model.predict(X_train))\n",
    "    test_accuracy = accuracy_score(y_test, best_model.predict(X_test))\n",
    "    class_report = classification_report(y_test, best_model.predict(X_test))\n",
    "    return train_accuracy, test_accuracy, grid_search.best_params_, class_report\n",
    "\n",
    "# Load datasets\n",
    "datasets = {\n",
    "    \"Breast Cancer\": load_breast_cancer(return_X_y=True),\n",
    "    \"Adult Income\": load_adult_dataset(),\n",
    "    \"Bank Marketing\": load_bank_dataset()\n",
    "}\n",
    "\n",
    "# Classifiers and hyperparameter grids\n",
    "classifiers = {\n",
    "    \"SVM\": (SVC(), {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}),\n",
    "    \"Random Forest\": (RandomForestClassifier(), {'n_estimators': [10, 50, 100], 'max_depth': [None, 10, 20]}),\n",
    "    \"k-NN\": (KNeighborsClassifier(), {'n_neighbors': [3, 5, 7]})\n",
    "}\n",
    "\n",
    "# Train-test splits\n",
    "splits = [(0.2, 0.8), (0.5, 0.5), (0.8, 0.2)]\n",
    "\n",
    "detailed_results = []\n",
    "\n",
    "# Main experiment loop\n",
    "for dataset_name, (X, y) in datasets.items():\n",
    "    X = StandardScaler().fit_transform(X)  # Feature scaling\n",
    "    for train_size, test_size in splits:\n",
    "        X_train, X_test, y_train, y_test = train_test_split(\n",
    "            X, y, train_size=train_size, test_size=test_size, random_state=42\n",
    "        )\n",
    "        for clf_name, (clf, param_grid) in classifiers.items():\n",
    "            train_acc, test_acc, best_params, class_report = evaluate_classifier(\n",
    "                clf, param_grid, X_train, y_train, X_test, y_test\n",
    "            )\n",
    "            detailed_results.append({\n",
    "                \"Dataset\": dataset_name,\n",
    "                \"Classifier\": clf_name,\n",
    "                \"Train Size\": train_size,\n",
    "                \"Test Size\": test_size,\n",
    "                \"Train Accuracy\": train_acc,\n",
    "                \"Test Accuracy\": test_acc,\n",
    "                \"Best Params\": best_params,\n",
    "                \"Classification Report\": class_report\n",
    "            })\n",
    "\n",
    "results_df = pd.DataFrame(detailed_results)\n",
    "\n",
    "print(results_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bar plot of test accuracy\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(\n",
    "    data=results_df,\n",
    "    x=\"Dataset\",\n",
    "    y=\"Test Accuracy\",\n",
    "    hue=\"Classifier\",\n",
    ")\n",
    "plt.title(\"Test Accuracy by Dataset and Classifier\")\n",
    "plt.ylabel(\"Test Accuracy\")\n",
    "plt.xlabel(\"Dataset\")\n",
    "plt.legend(title=\"Classifier\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract Random Forest results for a specific dataset\n",
    "rf_results = results_df[(results_df[\"Classifier\"] == \"Random Forest\") & (results_df[\"Dataset\"] == \"Breast Cancer\")]\n",
    "\n",
    "# Heatmap of accuracy vs hyperparameters\n",
    "pivot_table = rf_results.pivot(index=\"Train Size\", columns=\"Test Size\", values=\"Test Accuracy\")\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(pivot_table, annot=True, cmap=\"YlGnBu\", fmt=\".3f\")\n",
    "plt.title(\"Random Forest Accuracy Heatmap (Breast Cancer Dataset)\")\n",
    "plt.xlabel(\"Test Size\")\n",
    "plt.ylabel(\"Train Size\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to generate a confusion matrix for a specific model\n",
    "def plot_confusion_matrix(model, X_test, y_test, title=\"Confusion Matrix\"):\n",
    "    y_pred = model.predict(X_test)\n",
    "    disp = ConfusionMatrixDisplay.from_predictions(y_test, y_pred, cmap=\"Blues\")\n",
    "    plt.title(title)\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "data = load_breast_cancer()\n",
    "X, y = data.data, data.target\n",
    "X = StandardScaler().fit_transform(X)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train a Random Forest model\n",
    "rf_model = RandomForestClassifier(max_depth=10, n_estimators=50, random_state=42)\n",
    "rf_model.fit(X_train, y_train)\n",
    "\n",
    "# Plot the confusion matrix\n",
    "plot_confusion_matrix(rf_model, X_test, y_test, title=\"Confusion Matrix for Random Forest (Breast Cancer)\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "cogs118a",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
